# a simple password generator
genpasswd() {
	# usage: genpasswd [-adhps] [length [count]]
	local -i human_readable=0
	local chars=""

	while getopts "adhps" opt; do
		case "$opt" in
			a) chars+="[:alnum:]" ;;
			d) chars+="[:digit:]" ;;
			p) chars+="[:punct:]" ;;
			s) chars+="[:graph:]" ;;
			h) human_readable=1   ;;
		esac
	done
	shift $((OPTIND - 1))

	local -i length="${1:-8}"
	local -i count="${2:-1}"

	if [ "$human_readable" -eq 1 ]; then
		command -v apg >/dev/null || return 1
		apg -c /dev/urandom -m "$length" -n "$count" -E oOlL10
	else
		< /dev/urandom \
			| tr -dc "${chars:-[:alnum:]}" \
			| fold -w "$length" \
			| head -n "$count"
	fi
}

command -v apt-key >/dev/null &&
apt-import-key() {
	# usage: apt-import-key <key>
	sudo apt-key adv --recv-keys --keyserver keyserver.ubuntu.com "$1"
}

command -v dpkg >/dev/null &&
dpkg-purge-rc() {
	dpkg -l | awk '/^rc/ {print $2}' | xargs -r sudo dpkg --purge
}

extract() {
	if [ ! -f "$1" ]; then
		printf "extract: '%s' is not a file\n" "$1" >&2
		return 1
	fi

	case "$1" in
		*.tar)  tar -xf "$1"       ;;
		*.tar.bz|*.tbz| \
		*.tar.bz2|*.tbz2)
				tar -xjf "$1"      ;;
		*.tar.gz|*.tgz)
				tar -xzf "$1"      ;;
		*.tar.xz|*.txz)
				tar -xJf "$1"      ;;
		*.tar.[zZ]|*.t[zZ])
				tar -xZf "$1"      ;;
		*.tar.lz|*.tlz| \
		*.tar.lzma|*.tlzma| \
		*.tar.lzo|*.tzo| \
		*.tar.zst|*.tzst)
				tar -xaf "$1"      ;;
		*.7z)   7za x -- "$1"      ;;
		*.a|*.ar)
				ar x -- "$1"       ;;
		*.ace)  unace e -- "$1"    ;;
		*.alz)  unalz -- "$1"      ;;
		*.arc|*.ark|*.ARC|*.ARK)
				nomarch -- "$1"    ;;
		*.arj|*.ARJ)
				arj e -r -- "$1"   ;;
		*.bz|*.bz2)
				bunzip2 -k -- "$1" ;;
		*.cab|*.CAB|*.exe|*.EXE)
				cabextract "$1"    ;;
		*.cpio) cpio -id -F "$1"   ;;
		*.deb)  dpkg -x -- "$1" .  ;;
		*.gz)   gunzip -k "$1"     ;;
		*.lha|*.lzh)
				lha x "$1"         ;;
		*.lrz|*.lrzip|*.rz)
				lrunzip -- "$1"    ;;
		*.lz)   lzip -d -k -- "$1" ;;
		*.lz4)  unlz4 -- "$1"      ;;
		*.lzma) xz -d -k "$1"      ;;
		*.lzo)  lzop -x "$1"       ;;
		*.rar)  unrar x -- "$1"    ;;
		*.src.rpm|*.rpm|*.spm)
				rpm2cpio "$1" | cpio -dium ;;
		*.xz)   unxz -k -- "$1"    ;;
		*.[zZ]) uncompress -- "$1" ;;
		*.zip)  unzip -- "$1"      ;;
		*.zst)  unzstd -- "$1"     ;;
		*.AppImage) ./"$1" --appimage-extract ;;
		*)
			printf "extract: '%s' - unkwown archive format\n" "$1" >&2
			return 1
	esac
}

archive() {
	local archive="$1"; shift

	if [ ! -e "$1" ]; then
		printf "usage: compress <ARCHIVE> [FILE...]\n" >&2
		return 1
	fi

	case "$archive" in
		*.tar.bz|*.tbz| \
		*.tar.bz2|*.tbz2)
			tar -cjf "$archive" "$@" ;;
		*.tar.gz|*.tgz)
			tar -czf "$archive" "$@" ;;
		*.tar.xz|*.txz)
			tar -cJf "$archive" "$@" ;;
		*.tar.[zZ]|*.t[zZ])
			tar -cZf "$archive" "$@" ;;
		*.tar.lzma|*.tlzma| \
		*.tar.lzo|*.tzo| \
		*.tar.lz|*.tlz)
			tar -caf "$archive" "$@" ;;
		*.tar)
			tar -cf  "$archive" "$@" ;;
		*.7z)
			7za a    "$archive" "$@" ;;
		*.zip)
			zip -r   "$archive" "$@" ;;
		*)
			printf "'%s' is unknown archive format\n" "$archive" >&2
			return 1
	esac
}

test -s /var/log/dpkg.log &&
apt-history() {
	# Parses dpkg log files to get package installation, removal, and rollback
	# information.
	#
	# Based on https://github.com/blyork/apt-history
	_logcat() {
		for file in /var/log/dpkg.log*; do
			[ -f "$file" ] || return 1
			case "$file" in
				*.log|*.log.1)
					cat "$file"
					;;
				*.gz)
					zcat "$file"
					;;
				*)
					printf '*** Invalid file: "%s" ***\n' "$file" >&2
					return 1
			esac
		done
	}

	logcat() {
		_logcat | sort -g
	}

	case "$1" in
		install|upgrade|remove)
			logcat | grep " $1 "
			;;
		rollback)
			logcat \
				| grep upgrade \
				| grep "$2" -A10000000 \
				| grep "$3" -B10000000 \
				| awk '{print $4"="$5}'
			;;
		*)
			logcat
	esac
}

ppa-find() {
	# usage: ppa-find <search string>
	wget -qO- "https://launchpad.net/ubuntu/+ppas?name_filter=${*// /+}" | \
		sed -n 's#^.\+=\"\(.\+\)\">.\+</a></td>.*$#https://launchpad.net\1#p'
}

command -v python3 >/dev/null &&
http_server() {
	# Run a simple web server in the current directory
	local -i port="${1:-8000}"
	echo "Web server is available at: http://localhost:${port}/" >&2
	python3 -m http.server "$port"
}

# create a new directory and enter it
mkcd() { mkdir -p "$1" && cd "$1"; }

scratch() {
	local dir

	dir=$(mktemp -d)

	# echo "$dir" | xsel -i -b 2>/dev/null || \
	# 	xclip -i -sel clipboard 2>/dev/null || \
	# 	true

	(
		echo "Entering \"$dir\""
		cd "$dir"
		eval "$SHELL"
	)

	echo "Cleaning up \"$dir\""
	rm -rf "$dir"
}
alias gg='scratch'

ssh-copy-pub() {
	local PS3="(select key)> "
	local COLUMNS=69
	local pubkey
	local -a pubkeys=()

	clip-file() {
		cat "$1" | tee >(xsel -i -b)
	}

	pubkeys=( "${(@f)$(ls -1rt "$HOME"/.ssh/*.pub)}" )

	if [ "${#pubkeys[@]}" -eq 1 ]; then
		clip-file "${pubkeys[0]}"
	else
		select pubkey in "${pubkeys[@]}"; do
			clip-file "$pubkey"
			break
		done
	fi
}

pull-repos() {
	local dir="${1:-.}"

	find "$dir" -maxdepth 3 -type d -name '.git' -printf '%h\n' |
		xargs -t -I {} -P 0 git -C {} pull origin master

	find "$dir" -maxdepth 3 -type d -name '.hg' -printf '%h\n' |
		xargs -t -I {} -P 0 hg --cwd {} pull
}

command -v docker >/dev/null &&
docker-pull-all() {
	# usage: docker-pull-all [IGNORE_PATTERN_1] [... IGNORE_PATTERN_N]
	local ignore_pattern

	ignore_pattern=${(j:|:)@}

	docker image ls --format "{{.Repository}}:{{.Tag}}" | \
		egrep -v "${ignore_pattern:- }" | xargs -r -t -I % docker pull %
}

command -v podman >/dev/null &&
podman-pull-all() {
	# usage: podman-pull-all [IGNORE_PATTERN_1] [... IGNORE_PATTERN_N]
	local ignore_pattern

	ignore_pattern=${(j:|:)@}

	podman image ls --no-trunc --format "{{.Repository}}:{{.Tag}}" | \
		egrep -v "${ignore_pattern:- }" | xargs -r -t -I % podman pull %
}

add2path() {
	local dir=${1:-$PWD}
	export PATH="$(readlink -f "$dir"):$PATH"
}

command -v apt-mark >/dev/null &&
list_installed_packages() {
	# returns list of packages installed by user
	# https://askubuntu.com/a/492343/565749
	comm -23 \
		<(apt-mark showmanual | sort -u) \
		<(gzip -dc /var/log/installer/initial-status.gz | awk '/Package/ {print $2}' | sort -u)
}

command -v mkvmerge >/dev/null &&
mkvmerge_all() {
	# Adds related audio/sub to a MKV container
	local src_dir="$1"

	[ -d "$src_dir" ] || return 1

	for f in "$src_dir"/*.mkv; do
		file_name="$(basename "$f" .mkv)"  # $f:t:r do the same
		mkvmerge -o "${file_name}_merged.mkv" "$file_name"*
	done
}

command -v dig >/dev/null &&
command -v parallel >/dev/null &&
dns_bench() {
	# usage: dns_bench [@server ...] [domain ...]
	local arg
	local -a dns_servers=(
		# Google DNS       Cloudflare DNS
		8.8.8.8            1.1.1.1
		8.8.4.4            1.0.0.1

		# OpenDNS          Yandex.DNS
		208.67.222.222     77.88.8.8
		208.67.220.220     77.88.8.1

		# Quad9            Adguard DNS
		9.9.9.9            176.103.130.130
		149.112.112.112    176.103.130.131

		# Neustar          Norton DNS
		156.154.70.1       198.153.192.1
		156.154.71.1       198.153.194.1
	)

	if [ -r "/etc/resolv.conf" ]; then
		dns_servers+=( $(awk '/nameserver/{print $2}' /etc/resolv.conf) )
	fi

	for arg in "$@"; do
		case "$arg" in
		@*) dns_servers+=( "${arg#@}" )
			shift ;;
		esac
	done

	parallel -j0 --tag dig @{} "${@:-google.com}" ::: "${dns_servers[@]}" |
		grep Query |
		sort -nk5  |
		column -t
}

command -v dig >/dev/null &&
command -v parallel >/dev/null &&
digger() {
	# usage: digger [opts ...] domain ...
	local -a _dns_types=(
		A AAAA AFSDB ANY APL CAA CDNSKEY CDS CERT CNAME DHCID DLV DNAME DNSKEY
		DS HINFO HIP IPSECKEY KEY KX LOC MX NAPTR NS NSEC NSEC3 NSEC3PARAM OPT
		PTR RP RRSIG SIG SOA SPF SRV SSHFP TA TKEY TLSA TSIG TXT
	)

	parallel -j0 dig -t {} +nocmd +noall +answer "$@" ::: "${_dns_types[@]}"
}

command -v parallel >/dev/null &&
command -v doh >/dev/null &&
doh_bench() {
	# usage: doh_bench [@server ...] [domain]
	local arg domain
	local -a doh_servers=(
		"https://dns.adguard.com/dns-query"
		"https://dns.google/dns-query"
		"https://cloudflare-dns.com/dns-query"
		"https://dns.quad9.net/dns-query"
		"https://doh.opendns.com/dns-query"
		"https://doh.cleanbrowsing.org/doh/family-filter"
		"https://doh.crypto.sx/dns-query"
		"https://doh.powerdns.org"
		"https://doh-de.blahdns.com/dns-query"
		"https://doh.securedns.eu/dns-query"
	)

	for arg in "$@"; do
		case "$arg" in
		@*) dns_servers+=( "${arg#@}" )
			shift ;;
		esac
	done

	parallel -j0 --tag -- /usr/bin/time -f %es doh -t "${@:-google.com}" {} ::: "${doh_servers[@]}" |
		column -t
}

command -v curl >/dev/null &&
cheat.sh() {
	# see curl cheat.sh/:help
	local topic="${1:=:help}"
	local opts="${2:=q&style=friendly}"

	curl cheat.sh/${topic}\?${opts} 2>/dev/null | less -Re
}

command -v curl >/dev/null &&
wttr() {
	# see curl wttr.in/:help
	local loc="${1:=}"
	local opts="${2:=2}"

	curl wttr.in/${loc}\?${opts} 2>/dev/null | less -Re
}

command -v curl >/dev/null &&
wttrv2() {
	# see curl wttr.in/:help
	local loc="${1:=}"
	local opts="${2:=}"

	curl v2.wttr.in/${loc}\?${opts} 2>/dev/null | less -Re
}

command -v curl >/dev/null &&
rate.sx() {
	# see curl rate.sx/:help
	local cmd="${1:=}"
	local opts="${2:=qF\&n=15}"

	curl rate.sx/${cmd}\?${opts} 2>/dev/null | less -Re
}

killall-zombies() {
	# kill zombie process
	ps -A -ostat,ppid | awk '/^Z/ { print $2; }' | xargs -r -L1 kill -HUP
}

command -v wget >/dev/null &&
download_files_from_page() {
	if [ "$#" -lt 2 ]; then
		cat <<- EOF
		Download all files with specific extension on a webpage

		Usage: $0 extension[,extension...] URL

		Example:

		$0 mp4 http://example.com/files/
		$0 mp3,ogg,wma http://samples.com/files/

		Google: http://lmgtfy.com/?q=intitle%3Aindex.of+mp3+-html+-htm+-php+-asp+-txt+-pls+madonna

		based on http://stackoverflow.com/a/18709707
		EOF

		return 1
	fi

	outputdir_name="$(awk -F/ '{print $(NF-1);}' <<< "$1")"
	mkdir -pv "$outputdir_name"
	cd "$outputdir_name" && wget -r -l1 -H -t1 -nd -N -np -A "$1" -erobots=off "$2"
}

command -v mpv >/dev/null &&
command -v jq >/dev/null &&
somafm() {
	local station title playlist
	local -A stations
	local PS3='> '

	while IFS=$'\t' read -r title playlist; do
		stations["$title"]="$playlist"
	done <<< $(wget -qO- https://somafm.com/channels.json | jq -r '.[][] | [ .title, .playlists[0].url ] | @tsv')

	while true; do
		echo "Select a station to listen:"
		select station in "${(@k)stations}" quit; do
			case "${station:-$REPLY}" in
				[qQ]*) return 0 ;;
			esac
			break
		done
		mpv --playlist="${stations[$station]}"
	done
}

command -v snap >/dev/null &&
snap-cleanup() {
	# remove disabled snaps
	snap list --all \
		| awk '/disabled/ { print $1, "--revision="$3 }' \
		| xargs -r -L1 sudo snap remove

	# remove cache files without hardlinks
	sudo find /var/lib/snapd/cache -type f -links 1 -delete
}

command -v fzf >/dev/null &&
fz-browser-history() {
	# https://junegunn.kr/2015/04/browsing-chrome-history-with-fzf/
	# https://github.com/junegunn/fzf/wiki/examples#browsing-history
	local cols sep selected_hist temp_hist
	local -a browser_dirs=(
		"${XDG_CONFIG_HOME:-$HOME/.config}/BraveSoftware/Brave-Browser"
		"${XDG_CONFIG_HOME:-$HOME/.config}/chromium"
		"${XDG_CONFIG_HOME:-$HOME/.config}/google-chrome-unstable"
		"${XDG_CONFIG_HOME:-$HOME/.config}/google-chrome-beta"
		"${XDG_CONFIG_HOME:-$HOME/.config}/google-chrome"
	)

	cols=$(( COLUMNS / 3 ))
	sep='{::}'
	temp_hist="$(mktemp -u)"

	selected_hist="$(find "${browser_dirs[@]}" -maxdepth 2 -name History | fzf -1)"

	[ -f "$selected_hist" ] || return 0

	command cp -f "$selected_hist" "$temp_hist"

	sqlite3 -separator "$sep" "$temp_hist" \
		"select substr(title, 1, $cols), url from urls order by last_visit_time desc" |
			awk -F "$sep" '{printf "%-'$cols's  \x1b[36m%s\x1b[m\n", $1, $2}' |
			fzf --ansi --multi | sed 's#.*\(https*://\)#\1#' | xargs -r xdg-open

	rm -f "$temp_hist"
}

find_bigger_than() {
	# find current dir files bigger than X size
	# usage: bigger_than SIZE [PATTERN] [PATH]
	find "${3:-.}" -type f -size +${1:-10M} -iname "${2:-*}"
}

anywhere() {
	local -a dbs=( -d /var/lib/mlocate/mlocate.db )

	# don't throw errors when file globs don't match anything
	setopt NULL_GLOB

	for db in "$HOME/.cache/updatedb"/*.db; do
		[ -f "$db" ] || break
		dbs+=( -d "$db" )
	done

	unsetopt NULL_GLOB

	locate "${dbs[@]}" "$@"
}

updatedb-mountpoint() {
	# usage: updatedb-mountpoint <mountpoint>
	# http://askubuntu.com/questions/460535/how-do-i-tell-locate-to-keep-the-index-of-an-external-hdd
	local db_file="${XDG_CACHE_HOME:=$HOME/.cache}/updatedb/$1:t.db"

	[ -n "$1" ] || return 1

	mkdir -p "$db_file:A:h"
	updatedb -l 0 -o "$db_file" -U "$1"
}

most-used-commands() {
	local -i top="${1:-10}"
	local -i last="${2:-999999}"

	tail -n "$last" "${HISTFILE:-${ZDOTDIR:-$HOME}/.zsh_history}" \
		| awk '
			{ $1 == "sudo" ? CMD[$2]++ : CMD[$1]++; count++; }
			END {
				for (a in CMD)
					print CMD[a] " " CMD[a]/count*100 "% " a;
				}' \
		| sort -nr \
		| head -n "$top" \
		| column -c2 -s " " -t \
		| nl
}

xopen() {
	xdg-open "$@" >/dev/null 2>&1
}

du_here() { du -haxd1 "${1:-.}" | sort -h; }

command -v lsof >/dev/null &&
lsports() {
	lsof -iTCP -sTCP:LISTEN -P -n
	lsof -iUDP -P -n
}

command -v lsof >/dev/null &&
lsconn() {
	lsof -Pni -r "1m==== %T ===="
}

command -v rpm >/dev/null &&
rpm-history() {
	# eq. LC_TIME=us_US.UTF-8 rpm -qa --last | tac
	rpm -qa --queryformat "%{INSTALLTIME} %{NAME}-%{VERSION}-%{RELEASE}.%{ARCH}\n" |
		sort -n -k1,1 | awk '{$1=strftime("%Y-%m-%d %H:%M:%S", $1); print $0}'
}

command -v ranger >/dev/null &&
xargs_tagged() {
	local tagged_file="${XDG_CONFIG_HOME:-$HOME/.config}/ranger/tagged"

	[ -s "$tagged_file" ] || return 1
	xargs -a "$tagged_file" -r -I{} "$@"
}

command -v jq >/dev/null &&
! command -v geoiplookup >/dev/null &&
geoiplookup() {
	local ip="${1-}"
	curl --silent \
		--request GET \
		--url "https://freegeoip.app/json/$ip" \
		--header 'accept: application/json' \
		--header 'content-type: application/json' | \
		jq -r 'to_entries[] | "\(.key),\(.value)"' | \
		column -t -s,
}

command -v zsh >/dev/null &&
zshrc_bench() {
	for _ ({1..10}); time zsh -i -c exit
}

command -v parallel >/dev/null &&
ping_bench() {
	local -a hosts

	if [ $# -gt 0 ]; then
		hosts=( "$@" )
	elif [ -t 0 ]; then
		cat >&2 <<-'USAGE_END'
		usage:
		$ ping_bench 192.168.0.{1..254}
		$ dig -t A +noall +answer {0..3}.pool.ntp.org | awk '{print $(NF)}' | ping_bench
		USAGE_END
		return 1
	else
		hosts=( ${(f)"$(cat)"} )
	fi

	printf '%-40s %8s %8s %8s\n' HOST MIN AVG MAX
	parallel -j252 --bar --tag ping -c 3 {} ::: "${hosts[@]}" |
		awk -F'[ \t/]' '/rtt/{printf "%-40s %8s %8s %8s\n", $1,$8,$9,$10}' |
		sort -nk2
}

command -v openssl >/dev/null &&
zlibcat() {
	# unpack files in .git/objects
	openssl zlib -d -in "${1:--}"
}

convertsecs() {
	# Convert seconds to years, days, hours, minutes, seconds
	local secs="$1"

	printf '%dy, %dd %dh:%dm:%ds\n' $((secs/31557600)) \
		$((secs%31557600/86400)) $((secs%86400/3600)) \
		$((secs%3600/60)) $((secs%60))
}

ddiff() {
	# Show diff between two dates
	# Usage:
	#  ddiff "July 20, 1947" now
	#  ddiff @-708577200 now
	local start_date="$(date -d "$1" +%s)"
	local end_date="$(date -d "$2" +%s)"
	local secs_diff=$((end_date - start_date))

	convertsecs "$secs_diff"
}

command -v fzf >/dev/null &&
fzf-preview() {
	local previewer

	# -- Set previewer if available
	for previewer in \
		"${XDG_CONFIG_HOME:-$HOME/.config}/ranger/scope.sh" \
		"${XDG_CONFIG_HOME:-$HOME/.config}/lf/previewer.sh"
	do
		if [ -x "$previewer" ]; then
			break
		fi
		unset previewer
	done

	if [ -z "$previewer" ]; then
		previewer="env COLORTERM=8bit bat \
			--color=always \
			--style=plain \
			--map-syntax=conf:ini \
			--map-syntax=rsc:ini \
			--map-syntax=theme:ini \
			--tabs 4 \
			--pager=never --"
	fi

	fzf --preview="$previewer {}" \
		--header="[Ctrl-O] open selected file" \
		--bind "ctrl-o:execute(xdg-open {-1} &>/dev/null)"
}

command -v fzf >/dev/null &&
command -v rg >/dev/null &&
fif() {
	# find-in-file - usage: fif <SEARCH_TERM>
	# https://betterprogramming.pub/boost-your-command-line-productivity-with-fuzzy-finder-985aa162ba5d#4cbe
	if [ -z "$*" ]; then
		echo "Need a string to search for!";
		return 1;
	fi
	rg --files-with-matches --no-messages -- "$*" |
		fzf --preview "rg --ignore-case --pretty --context 10 -- '$*' {}"
}

# vim:ft=zsh
