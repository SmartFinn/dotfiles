# A TOML linter such as https://taplo.tamasfe.dev/ can use this schema to validate your config.
# If you encounter any issues, please make an issue at https://github.com/yazi-rs/schemas.
"$schema" = "https://yazi-rs.github.io/schemas/keymap.json"

[manager]

prepend_keymap = [
	# unmap some default keybindings
	{ on = "<C-c>",      run = "noop" },
	{ on = "<C-r>",      run = "noop" },
	{ on = "p",          run = "noop" },
	{ on = "P",          run = "noop" },
	{ on = "d",          run = "noop" },
	{ on = "D",          run = "noop" },
	{ on = "x",          run = "noop" },
	{ on = "X",          run = "noop" },
	{ on = "y",          run = "noop" },
	{ on = "Y",          run = "noop" },
	{ on = "-",          run = "noop" },
	{ on = "_",          run = "noop" },
	{ on = "<C-->",      run = "noop" },
	{ on = "<C-s>",      run = "noop" },
	{ on = [ "c", "c" ], run = "noop" },
	{ on = [ "c", "p" ], run = "noop" },
	{ on = [ "c", "d" ], run = "noop" },
	{ on = [ "c", "f" ], run = "noop" },
	{ on = [ "c", "n" ], run = "noop" },
	{ on = "[",          run = "noop" },
	{ on = "]",          run = "noop" },
	{ on = "t",          run = "noop" },
	{ on = "z",          run = "noop" },
	{ on = "Z",          run = "noop" },

	# Overwrite the default keybinding to make them ranger-like
	{ on = "q",     run = "close",              desc = "Close the current tab, or quit if it's last" },
	{ on = "Q",     run = "quit",               desc = "Quit the process" },
	{ on = "<C-q>", run = "quit --no-cwd-file", desc = "Quit without outputting cwd-file" },
	{ on = "<C-w>", run = "close",              desc = "Close the current tab, or quit if it's last" },
	{ on = "<C-r>", run = "refresh",            desc = "Refresh screen" },

	# Do not jump up when moving down
	{ on = "k", run = "arrow -1", desc = "Move cursor up" },
	{ on = "j", run = "arrow 1", desc = "Move cursor down" },

	# Toggle
	{ on = "<C-v>",      run = "toggle_all",             desc = "Invert selection of all files" },
	{ on = [ "u", "v" ], run = "toggle_all --state=off", desc = "Deselect all files" },

	# Spotting
	{ on = "i", run = "spot", desc = "Spot hovered file" },

	# Operation
	{ on = "r",          run = "open --interactive",          desc = "Open selected files interactively" },
	{ on = [ "y", "y" ], run = "yank",                        desc = "Yank selected files (copy)" },
	{ on = [ "d", "d" ], run = "yank --cut",                  desc = "Yank selected files (cut)" },
	{ on = [ "p", "p" ], run = "paste",                       desc = "Paste yanked files" },
	{ on = [ "p", "o" ], run = "paste --force",               desc = "Paste yanked files (overwrite if the destination exists)" },
	{ on = [ "p", "l" ], run = "link",                        desc = "Symlink the absolute path of yanked files" },
	{ on = [ "p", "L" ], run = "link --relative",             desc = "Symlink the relative path of yanked files" },
	{ on = [ "p", "h" ], run = "hardlink",                    desc = "Hardlink yanked files" },
	{ on = [ "u", "y" ], run = "unyank",                      desc = "Cancel the yank status" },
	{ on = [ "d", "D" ], run = "remove",                      desc = "Trash selected files" },
	{ on = "<Delete>",   run = "remove",                      desc = "Trash selected files" },
	{ on = [ "d", "r" ], run = "remove --permanently",        desc = "Permanently delete selected files" },
	{ on = "I",          run = "rename --cursor=before_ext",  desc = "Rename selected file(s)" },
	{ on = "A",          run = "rename",                      desc = "Rename selected file(s)" },
	{ on = [ "c", "c" ], run = "rename --empty=stem --cursor=start", desc = "Replace filename" },
	{ on = [ "z", "h" ], run = "hidden toggle",               desc = "Toggle the visibility of hidden files" },
	{ on = "S",          run = 'shell "$SHELL" --block --confirm', desc = "Open shell here" },
	{ on = "R",          run = "search --via=rg",             desc = "Search files by content via ripgrep" },
	{ on = [ "z", "z" ], run = "plugin fzf",                  desc = "Jump to a file/directory via fzf" },
	{ on = [ "z", "c" ], run = "plugin zoxide",               desc = "Jump to a directory via zoxide" },

	# Copy
	{ on = [ "y", "p" ], run = "copy path",             desc = "Copy the file path" },
	{ on = [ "y", "d" ], run = "copy dirname",          desc = "Copy the directory path" },
	{ on = [ "y", "f" ], run = "copy filename",         desc = "Copy the filename" },
	{ on = [ "y", "n" ], run = "copy name_without_ext", desc = "Copy the filename without extension" },

	# Filter
	{ on = [ "z", "f" ], run = "filter --smart", desc = "Filter files" },

	# Jump to char
	{ on = "f", run = "noop" },
	{ on = [ "f", "0" ], run = "find_do '^0' --insensitive", desc = "Jump to ^0" },
	{ on = [ "f", "1" ], run = "find_do '^1' --insensitive", desc = "Jump to ^1" },
	{ on = [ "f", "2" ], run = "find_do '^2' --insensitive", desc = "Jump to ^2" },
	{ on = [ "f", "3" ], run = "find_do '^3' --insensitive", desc = "Jump to ^3" },
	{ on = [ "f", "4" ], run = "find_do '^4' --insensitive", desc = "Jump to ^4" },
	{ on = [ "f", "5" ], run = "find_do '^5' --insensitive", desc = "Jump to ^5" },
	{ on = [ "f", "6" ], run = "find_do '^6' --insensitive", desc = "Jump to ^6" },
	{ on = [ "f", "7" ], run = "find_do '^7' --insensitive", desc = "Jump to ^7" },
	{ on = [ "f", "8" ], run = "find_do '^8' --insensitive", desc = "Jump to ^8" },
	{ on = [ "f", "9" ], run = "find_do '^9' --insensitive", desc = "Jump to ^9" },
	{ on = [ "f", "a" ], run = "find_do '^a' --insensitive", desc = "Jump to ^a" },
	{ on = [ "f", "b" ], run = "find_do '^b' --insensitive", desc = "Jump to ^b" },
	{ on = [ "f", "c" ], run = "find_do '^c' --insensitive", desc = "Jump to ^c" },
	{ on = [ "f", "d" ], run = "find_do '^d' --insensitive", desc = "Jump to ^d" },
	{ on = [ "f", "e" ], run = "find_do '^e' --insensitive", desc = "Jump to ^e" },
	{ on = [ "f", "f" ], run = "find_do '^f' --insensitive", desc = "Jump to ^f" },
	{ on = [ "f", "g" ], run = "find_do '^g' --insensitive", desc = "Jump to ^g" },
	{ on = [ "f", "h" ], run = "find_do '^h' --insensitive", desc = "Jump to ^h" },
	{ on = [ "f", "i" ], run = "find_do '^i' --insensitive", desc = "Jump to ^i" },
	{ on = [ "f", "j" ], run = "find_do '^j' --insensitive", desc = "Jump to ^j" },
	{ on = [ "f", "k" ], run = "find_do '^k' --insensitive", desc = "Jump to ^k" },
	{ on = [ "f", "l" ], run = "find_do '^l' --insensitive", desc = "Jump to ^l" },
	{ on = [ "f", "m" ], run = "find_do '^m' --insensitive", desc = "Jump to ^m" },
	{ on = [ "f", "n" ], run = "find_do '^n' --insensitive", desc = "Jump to ^n" },
	{ on = [ "f", "o" ], run = "find_do '^o' --insensitive", desc = "Jump to ^o" },
	{ on = [ "f", "p" ], run = "find_do '^p' --insensitive", desc = "Jump to ^p" },
	{ on = [ "f", "q" ], run = "find_do '^q' --insensitive", desc = "Jump to ^q" },
	{ on = [ "f", "r" ], run = "find_do '^r' --insensitive", desc = "Jump to ^r" },
	{ on = [ "f", "s" ], run = "find_do '^s' --insensitive", desc = "Jump to ^s" },
	{ on = [ "f", "t" ], run = "find_do '^t' --insensitive", desc = "Jump to ^t" },
	{ on = [ "f", "u" ], run = "find_do '^u' --insensitive", desc = "Jump to ^u" },
	{ on = [ "f", "v" ], run = "find_do '^v' --insensitive", desc = "Jump to ^v" },
	{ on = [ "f", "w" ], run = "find_do '^w' --insensitive", desc = "Jump to ^w" },
	{ on = [ "f", "x" ], run = "find_do '^x' --insensitive", desc = "Jump to ^x" },
	{ on = [ "f", "y" ], run = "find_do '^y' --insensitive", desc = "Jump to ^y" },
	{ on = [ "f", "z" ], run = "find_do '^z' --insensitive", desc = "Jump to ^z" },

	# Goto
	{ on = [ "g", "h" ], run = "cd ~",             desc = "Go home" },
	{ on = [ "g", "c" ], run = "cd ~/.config",     desc = "Go ~/.config" },
	{ on = [ "g", "y" ], run = "cd ~/.config/yazi", desc = "Go Yazi configuration" },
	{ on = [ "g", "d" ], run = "cd ~/Downloads",   desc = "Go ~/Downloads" },
	{ on = [ "g", "/" ], run = "cd /",             desc = "Go root" },
	{ on = [ "g", "e" ], run = "cd /etc",          desc = "Go /etc" },
	{ on = [ "g", "u" ], run = "cd /usr",          desc = "Go /usr" },
	{ on = [ "g", "v" ], run = "cd /var",          desc = "Go /var" },
	{ on = [ "g", "m" ], run = "cd /media",        desc = "Go /media" },
	{ on = [ "g", "M" ], run = "cd /mnt",          desc = "Go /mnt" },
	{ on = [ "g", "i" ], run = "cd /run/media/$USER", desc = "Go /run/media/$USER" },
	{ on = [ "g", "r" ], run = 'shell -- ya emit cd "$(git rev-parse --show-toplevel)"', desc = "Go git root" },

	# Tabs
	{ on = "<C-n>", run = "tab_create --current", desc = "Create a new tab with CWD" },
	{ on = "<BackTab>", run = "tab_switch -1 --relative", desc = "Switch to previous tab" },
	{ on = "<Tab>",     run = "tab_switch 1 --relative",  desc = "Switch to next tab" },

	# Launch
	{ on = "e", run = "shell --block '${EDITOR:-nvim} \"$@\"'", desc = "Open file in an editor" },
	{ on = [ "d", "u" ], run = "shell --block gdu", desc = "Run gdu in the current directory" },

	# Plugins
	{ on = "l", run = [ "plugin smart-enter", "escape --visual --select" ], desc = "Enter child directory, or open file" },
	{ on = "<Enter>", run = "plugin smart-enter", desc = "Enter child directory, or open file" },

	{ on = "F", run = "plugin smart-filter", desc = "Smart filter" },

	{ on = "<C-\\>", run = "plugin toggle-pane min-preview", desc = "Hide or show preview" },

	{ on = "<A-m>", run = "plugin mount", desc = "Show mount manager" },
	{ on = "<A-l>", run = "plugin lazygit", desc = "Run lazygit" },

	{ on = "=", run = "plugin chmod", desc = "Chmod on selected files" },
	{ on = [ "c", "m" ], run = "plugin chmod", desc = "Chmod on selected files" },

	{ on = [ "x", "c" ], run = "plugin compress", desc = "Archive selected files" },
	{ on = [ "x", "C" ], run = "plugin compress -- --secure", desc = "Compress file(s) with password" },

	# Fn keys
	{ on = "<F3>",  run = "plugin toggle-pane max-preview", desc = "Maximize or restore preview" },
	{ on = "<F4>",  run = "shell --block '${EDITOR:-nvim} \"$@\"'", desc = "Open file in an editor" },
	{ on = "<F6>",  run = "rename", desc = "Rename selected file(s)" },
	{ on = "<F7>",  run = "create", desc = "Create a file (ends with / for directories)" },
	{ on = "<F8>",  run = "remove --permanently", desc = "Permanently delete selected files" },
	{ on = "<F10>", run = "quit", desc = "Quit" },
]

[input]

prepend_keymap = [
	{ on = "<Esc>", run = "close", desc = "Cancel input" },
]

[spot]

prepend_keymap = [
	{ on = "q", run = "close", desc = "Cancel the spot" },
]

[tasks]

prepend_keymap = [
	{ on = "q", run = "close", desc = "Close the spot" },
]

[help]

prepend_keymap = [
	{ on = "q", run = "close", desc = "Close the help" },
]
