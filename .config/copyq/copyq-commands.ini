[Commands]
1\Command="copyq:\nvar text1 = str(clipboard())\ncopy()\nvar text2 = str(clipboard())\ncopy(text1 + '\\n' + text2)"
1\GlobalShortcut=ctrl+alt+c
1\Icon=\xf0ea
1\IsGlobalShortcut=true
1\Name=Copy - Append
10\Command=sort
10\Icon=\xf15d
10\InMenu=true
10\Input=text/plain
10\Name=Sort
10\Output=text/plain
10\Tab=&clipboard
10\Transform=true
11\Command="sed \"y|abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ[]{};':\\\",./<>?@#\\$^&\\`~\x444\x438\x441\x432\x443\x430\x43f\x440\x448\x43e\x43b\x434\x44c\x442\x449\x437\x439\x43a\x44b\x435\x433\x43c\x446\x447\x43d\x44f\x424\x418\x421\x412\x423\x410\x41f\x420\x428\x41e\x41b\x414\x42c\x422\x429\x417\x419\x41a\x42b\x415\x413\x41c\x426\x427\x41d\x42f\x445\x44a\x425\x42a\x436\x44d\x416\x42d\x431\x44e\x411\x42e\x2116\x451\x401|\x444\x438\x441\x432\x443\x430\x43f\x440\x448\x43e\x43b\x434\x44c\x442\x449\x437\x439\x43a\x44b\x435\x433\x43c\x446\x447\x43d\x44f\x424\x418\x421\x412\x423\x410\x41f\x420\x428\x41e\x41b\x414\x42c\x422\x429\x417\x419\x41a\x42b\x415\x413\x41c\x426\x427\x41d\x42f\x445\x44a\x425\x42a\x436\x44d\x416\x42d\x431\x44e.\x411\x42e,\\\"\x2116;:?\x451\x401\x61\x62\x63\x64\x65\x66ghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ[]{};':\\\",.<>#\\`~|\""
11\Icon=\xf021
11\InMenu=true
11\Input=text/plain
11\Name=qwerty \x2192 \x439\x446\x443\x43a\x435\x43d
11\Output=text/plain
11\Tab=&clipboard
11\Transform=true
12\Automatic=true
12\Command="copyq:\n// Imports raw commands code (starting with [Command] or [Commands])\n// or from a link ('https://github.com/**/copyq-commands/blob/**.ini').\nvar timeOutSeconds = 10\nvar rawDataUrlPrefix = 'https://raw.githubusercontent.com'\n// Don't run this when mouse selection changes.\nif ( dataFormats().indexOf(mimeClipboardMode) != -1 )\n  abort()\nfunction importCommandsFromUrl(url)\n{\n  var m = url.match(/https?:\\/\\/github\\.com(\\/.*)\\/blob(\\/.*)/)\n  if (!m)\n    return;\n  var rawDataUrl = rawDataUrlPrefix + m[1] + m[2]\n  var commandsData = str(networkGet(rawDataUrl).data)\n  if ( !commandsData.match(/^\\[Commands?\\]/) )\n    return;\n  return importCommands(commandsData);\n}\nvar cmds = importCommandsFromUrl(str(input())) || importCommands(input())\nvar list = '<ul>'\nfor (var i in cmds) {\n  var cmd = cmds[i]\n  var cmdType =\n    cmd.automatic ? 'automatic' :\n    cmd.inMenu ? 'menu/shortcut' :\n    cmd.globalShortcuts ? 'global shortcut' : '<b>???</b>';\n  list += '<li>' + escapeHtml(cmds[i].name) + ' (' + cmdType + ')</li>'\n}\nlist += '</ul>'\nvar message = '<p><b>Import commands</b> from clipboard?</p>' + list\nnotification(\n  '.title', 'Commands Available',\n  '.message', message,\n  '.time', timeOutSeconds*1000,\n  '.icon', '\xf085',\n  '.id', 'CopyQ_commands_in_clipboard',\n  '.button', 'Cancel', '', '',\n  '.button', 'Import', 'copyq: addCommands( importCommands(input()) )', exportCommands(cmds)\n)"
12\Enable=false
12\Icon=\xf085
12\Input=text/plain
12\Match=^\\[Commands?\\]|https?://github\\.com/.*/copyq-commands/blob/.*\\.ini
12\Name=Notification for Copied Commands
13\Command=copyq: plugins.itempinned.pin()
13\Icon=\xf08d
13\InMenu=true
13\Input=!OUTPUT
13\Name=Pin
13\Output=application/x-copyq-item-pinned
14\Command=copyq: plugins.itempinned.unpin()
14\Icon=\xf08d
14\InMenu=true
14\Input=application/x-copyq-item-pinned
14\Name=Unpin
15\Command=copyq: plugins.itemtags.tag(decodeURIComponent('Important'))
15\Icon=\xf02b
15\InMenu=true
15\MatchCommand=copyq: plugins.itemtags.hasTag(decodeURIComponent('Important')) && fail()
15\Name=Tag as \x201cImportant\x201d
16\Command=copyq: plugins.itemtags.untag(decodeURIComponent('Important'))
16\Icon=\xf02b
16\InMenu=true
16\MatchCommand=copyq: plugins.itemtags.hasTag(decodeURIComponent('Important')) || fail()
16\Name=Remove tag \x201cImportant\x201d
17\Command=copyq: plugins.itemtags.tag()
17\Icon=\xf02b
17\InMenu=true
17\Name=Add a Tag
18\Command=copyq: plugins.itemtags.untag()
18\Icon=\xf02b
18\InMenu=true
18\Input=application/x-copyq-tags
18\Name=Remove a Tag
19\Command=copyq: plugins.itemtags.clearTags()
19\Icon=\xf02b
19\InMenu=true
19\Input=application/x-copyq-tags
19\Name=Clear all tags
2\Automatic=true
2\Icon=\xf06a
2\Input=text/uri-list
2\Match=^(?!(http|ftp)s?://)
2\Name=Ignore copied files
2\Remove=true
20\Command=copyq: edit(-1)
20\Icon=\xf044
20\IsGlobalShortcut=true
20\Name=Edit clipboard
21\Command=copyq: menu()
21\GlobalShortcut=alt+v
21\Icon=\xf01c
21\IsGlobalShortcut=true
21\Name=Show the tray menu
3\Automatic=true
3\Command=copyq ignore
3\Icon=\xf069
3\Name=Ignore KeePassXC window
3\Remove=true
3\Window=KeePassXC
4\Icon=\xf064
4\InMenu=true
4\IsGlobalShortcut=true
4\Name=Copy to \"Notes\" tab
4\Tab=Notes
5\Automatic=true
5\Icon=\xf06a
5\Input=text/plain
5\Match=^\\s*\\S?\\s*$
5\Name=Ignore items with no or single character
5\Remove=true
6\Command="copyq: copy('image/png', screenshotSelect())"
6\GlobalShortcut=ctrl+print
6\Icon=\xf083
6\IsGlobalShortcut=true
6\Name=Screenshot Cutout
7\Automatic=true
7\Command="copyq:\nvar tabName = '&url'\n\nfunction lower(data) {\n  return str(data).toLowerCase()\n}\n\nfunction findHeader(reply, headerName) {\n  reply.data // fetches data and headers\n  var headers = reply.headers\n  for (var i in headers) {\n    var header = headers[i]\n    if (lower(header[0]) === headerName)\n       return header[1]\n  }\n  return ''\n}\n\nfunction isHtml(reply) {\n  var header = findHeader(reply, 'content-type')\n  if (header)\n    return lower(header).indexOf(mimeHtml) === 0\n  return false\n}\n\nfunction fetchContent(url, maxRedirects) {\n  if (maxRedirects === undefined)\n    maxRedirects = 4\n\n  var reply = networkGet(url)\n  if (maxRedirects == 0)\n    return reply\n  var header = findHeader(reply, 'location')\n  if (header)\n    return fetchContent(header, maxRedirects - 1)\n\n  return reply\n}\n\nfunction grep(content, re) {\n  return content ? (re.exec(content) || [])[1] : ''\n}\n\nfunction getTitle(content) {\n  var title = grep(content, /<title[^>]*>([^<]*)<\\/title>/i)\n  return title ? title.trim() : ''\n}\n\nfunction getFavicon(content) {\n  var iconLine = grep(content, /<link([^>]*rel=[\"'](?:shortcut )?icon[\"'][^>]*)/i)\n  var icon = grep(iconLine, /href=[\"']([^\"']*)/i)\n\n  if (!icon)\n    return ''\n\n  // Icon path can be complete URL.\n  if (icon.indexOf('://') != -1)\n    return fetchContent(icon).data\n\n  // Icon path can be missing protocol.\n  if (icon.substr(0, 2) === '//') {\n    var i = url.search(/\\/\\//)\n    var protocol = (i == -1) ? 'http:' : url.substr(0, i)\n    return fetchContent(protocol + icon).data\n  }\n\n  // Icon path can be relative to host URL.\n  if (icon[0] === '/') {\n    var baseUrl = url.substr(0, url.search(/[^\\/:](\\/|$)/) + 1)\n    return fetchContent(baseUrl + icon).data\n  }\n\n  // Icon path can be relative to current URL.\n  var baseUrl = url.substr(0, url.lastIndexOf('/') + 1)\n  return fetchContent(baseUrl + icon).data\n}\n\nvar url = str(input()).trim()\n\n// URL already added? (Just check the top of the list.)\nif (url === str(read(0)))\n  abort()\n\n// Fetch HTML.\nvar reply = fetchContent(url)\nif (isHtml(reply)) {\n  var content = str(reply.data)\n  var title = getTitle(content)\n  var icon = getFavicon(content)\n\n  setData(mimeItemNotes, title || '')\n  setData('application/x-copyq-item-icon', icon)\n}\n\nsetData(mimeOutputTab, tabName)"
7\Icon=\xf0c1
7\Input=text/plain
7\Match=^https?://
7\Name=Tab for URLs with Title and Icon
8\Automatic=true
8\Command="copyq:\nvar tabName = 'Selections'\nsetData(mimeOutputTab, tabName)"
8\Icon=\xf245
8\MatchCommand="copyq: dataFormats().indexOf(mimeClipboardMode) == -1 && fail()"
8\Name=Store Mouse Selections in Separate Tab
9\Command="copyq: \n// http://doc.qt.io/qt-5/qdatetime.html#toString\nvar format = 'dddd, MMMM d, yyyy h:mm:ss AP t'\nvar dateTime = dateString(format)\ncopy(dateTime)\npaste()\n"
9\Icon=\xf017
9\InMenu=true
9\Name=Paste current date and time
size=21
